#+TITLE: 优化配置启动时间
#+DATE: 2021-08-22T12:49:15+08:00
#+DRAFT: true
#+TAGS[]: tips

最近在知乎上回答了一个问题[[https://www.zhihu.com/question/472788138/answer/2006637253][请问你的emacs启动需要多久？]]，之前一直怎么花经历去优化启动时间，虽然知道一些理论，但纸上得来终觉浅，于是这个周末实践了一下，这篇文章就来总结下收获。

* 目标
Emacs 中提供了一个函数来记录启动时长，即 =emacs-init-time= ，后文也用这个时间作为优化目标。
首先看下零配置下的时间，这个值也是理论上的最优值

#+BEGIN_SRC
emacs -Q -nw

M-x emacs-init-time
0.005363 seconds
#+END_SRC

* 效果
介绍具体步骤前，先看看这次优化的数据
| 阶段   | =(length package-alist)= | =(emacs-init-time)= |
|--------+--------------------------+---------------------|
| 优化前 |                      116 |             6.50532 |
| 优化后 |                       65 |            1.198395 |
* 工具
** use-package
  我现在的配置都是基于 use-package 来配置，use-package 提供了下面两个配置项来打印包的加载时间：
  - =use-package-verbose= ，设置为 =t= 即可打印包加载时间
  - =use-package-minimum-reported-time= ，默认是 0.1 秒，可根据需要修改

  有一点需要注意，verbose 统计的是 =:config= 内的执行时间， =:init= 的不会统计，所以时间这个方式统计的数据不一定准确
** [[https://github.com.cnpmjs.org/dholm/benchmark-init-el][benchmark-init-el]]
本次优化主要使用这个工具，它提供了两种视图：
- =benchmark-init/show-durations-tabulated= 表视图，可以查看一个包以及其依赖的加载时间
#+begin_src bash
| Module                       |  Type   | ms [^] | total ms |
+------------------------------+---------+--------+----------+
| org-contacts                 | require |    10  |      1164|

#+end_src

  上面这个表示加载 org-contacts 本身需要 10ms ，但是加上其依赖后，总耗时却要 1164ms ，说明其依赖非常重。
- =benchmark-init/show-durations-tree= 树视图，可以查看包的加载顺序，
  #+begin_src
╼►[benchmark-init/root nil 6987ms]
  ├─[xdg require 14ms]
  │ ├─[~/.config/emacs/var/autoloads/elfeed-autoloads.el load 46ms]
  │ ├─[evil-terminal-cursor-changer require 4ms]
  │ ├─[org-contacts require 10ms]
  │ │ ├─[org-capture require 17ms]
  │ │ ├─[org-agenda require 29ms]
  │ │ │ ╰─[org-refile require 18ms]
  │ │ ├─[gnus-art require 27ms]
  │ │ │ ├─[mm-uu require 15ms]
  │ │ │ │ ╰─[mml2015 require 15ms]
  │ │ │ ├─[mm-view require 15ms]
  │ │ │ │ ├─[mml-smime require 15ms]
  │ │ │ │ ╰─[smime require 21ms]
  │ │ │ │   ╰─[dig require 14ms]
  │ │ │ ├─[gnus-sum require 31ms]
  │ │ │ │ ├─[url require 13ms]
  │ │ │ │ │ ├─[url-proxy require 17ms]
  │ │ │ │ │ ├─[url-privacy require 13ms]
  │ │ │ │ │ ├─[url-expand require 13ms]
  │ │ │ │ │ │ ╰─[url-methods require 13ms]
  │ │ │ │ │ ├─[url-history require 17ms]
  │ │ │ │ │ ╰─[mailcap require 17ms]
  ......
  ......
  #+end_src
  通过上面的树状图，可以看到 org-contacts 所有依赖的加载时间。

  本次优化前的数据放在里[[https://gist.github.com/jiacai2050/cf30db07bb2e95ffb7d5114bc95c0cfc][这个 gist]] 中，共读者参考。
* 过程
** 去掉 org-babel
在很久之前，得知可以把配置写在一个
纸上得来终倔起按
#+begin_src emacs-lisp
(defmacro my/timer (&rest body)
  "Measure and return the time it takes evaluating BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

(message "projectile config cost %s"
         (my/timer
          (use-package projectile
            :init
            (projectile-mode +1)
            :bind ("C-c p" . projectile-command-map)
            :custom (projectile-project-search-path '("~/code/" "~/gh/" "~/code/antfin/" "~/code/misc"))
            :config
            (setq projectile-switch-project-action #'projectile-find-file-dwim
                  projectile-completion-system 'ivy
                  ;; projectile-enable-caching t
                  projectile-project-root-functions '(projectile-root-local
                                                      projectile-root-bottom-up)
                  projectile-project-root-files-bottom-up '(".projectile" "README.org" "README.md"
                                                            "Makefile" "pom.xml" "go.mod" "cargo.toml" "project.clj"
                                                            ".git" ".hg")
                  projectile-ignored-project-function (lambda (project-root)
                                                        (cl-dolist (deny '("\\.git" "\\.rustup" "\\.cargo" "go/pkg" "vendor"))
                                                          (when (string-match-p deny project-root)
                                                            (cl-return t))))))))

#+end_src

projectile config cost 0.781213


67 packages loaded in 2.214488 seconds
3.681204 seconds

#+BEGIN_SRC bash
  ├─[~/.config/emacs/i-edit.el load 573ms]
  │ ├─[smex require 6ms]
  │ │ ╰─[ido require 16ms]
  │ ├─[ivy-faces require 6ms]
  │ ├─[ivy-overlay require 6ms]
  │ ├─[colir require 6ms]
  │ │ ╰─[color require 12ms]
  │ ├─[smartparens-config require 12ms]
  │ │ ├─[smartparens-text require 9ms]
  │ │ ╰─[smartparens require 59ms]
  │ │   ╰─[dash require 36ms]
  │ ├─[persistent-scratch require 5ms]
  │ ├─[diff require 12ms]
  │ ├─[filenotify require 13ms]
  │ ├─[~/.config/emacs/var/recentf-save.el load 2ms]
  │ ├─[tree-widget require 12ms]
  │ ├─[cus-start require 14ms]
  │ ├─[cus-load require 20ms]
  │ ╰─[wid-edit require 18ms]
  ├─[~/.config/emacs/i-basic.el load 63ms]
#+END_SRC
-*- mode:grep; default-directory: "~/.config/emacs/" -*-


5 candidates:
./*Benchmark Init Results Tabulated*:1:  ~/.config/emacs/i-edit.el                                         load        266     467
./*Benchmark Init Results Tabulated*:2:  ~/.config/emacs/i-basic.el                                        load         79     603
./*Benchmark Init Results Tabulated*:9:  ~/.config/emacs/i-ui.el                                           load         26      61
./*Benchmark Init Results Tabulated*:26:  ~/.config/emacs/i-prog.el                                         load         14      61
./*Benchmark Init Results Tabulated*:62:  ~/.config/emacs/i-misc.el                                         load         10      25


* 参考
https://blog.d46.us/advanced-emacs-startup/
